
import { window, ExtensionContext, commands } from 'vscode';
import { getRootDir, ProjectType, openAndFormatFile, parseFieldsStr, nameToPlural } from './util';
// import { doGenerateBlocCode } from './bloc';
import { Cmd } from './cmd';
import { getWebInfo } from './web_util';
import { Field } from './field';

var snakeCase = require('snake-case');
var camelCase = require('camel-case');
var pascalCase = require('pascal-case');

var fs = require('fs');


export enum PageKind {
  Basic,
  Detail,
  FormAdd,
  FormUpdate,
  CRUDPage
}

class GenWebOpts {
  kind: PageKind;
  constructor(kind: PageKind) {
    this.kind = kind;
  }
}

export function setup(context: ExtensionContext) {
  context.subscriptions.push(commands.registerCommand('extension.web', async () => {
    const quickPick = window.createQuickPick();
    quickPick.items = [
      new Cmd("Generate listing CRUD page", () => generateListingCrudPage(new GenWebOpts(PageKind.CRUDPage)))
    ];
    quickPick.onDidChangeSelection(selection => {
      if (selection[0]) {
        (selection[0] as Cmd).code_action(context).catch(console.error)
          .then((result) => {
            console.log(result);
            quickPick.dispose();
          });
      }
    });
    quickPick.onDidHide(() => quickPick.dispose());
    quickPick.show();
  }));
}


export async function generateListingCrudPage(opts: GenWebOpts) {
  const web = getWebInfo();

  if (!web) {
    return;
  }

  // get component name
  const name = await window.showInputBox({
    value: '',
    valueSelection: [0, 11],
    placeHolder: 'Name, eg: Todo'
  }) || "";

  if (name === "") {
    return;
  }

  var viewsDir = `${web.projectDir}/src/views`;

  if (!fs.existsSync(viewsDir)) {
    fs.mkdirSync(viewsDir);
  }
  var nameSnake = snakeCase(name);
  var namePascal = pascalCase(name);

  // var pageNameDir = nameSnake.split('_')[0];

  // if (!fs.existsSync(`${viewsDir}/${pageNameDir}`)) {
  //   fs.mkdirSync(`${viewsDir}/${pageNameDir}`);
  // }

  var pageFilePath = "";
  switch (opts.kind) {
    case PageKind.CRUDPage:
      pageFilePath = `${viewsDir}/${nameToPlural(namePascal)}.vue`;
      break;
    case PageKind.Detail:
      pageFilePath = `${viewsDir}/${namePascal}_detail_page.dart`;
      break;
    case PageKind.Basic:
      pageFilePath = `${viewsDir}/${namePascal}_page.dart`;
      break;
    case PageKind.FormAdd:
      pageFilePath = `${viewsDir}/${namePascal}_add_page.dart`;
      break;
    case PageKind.FormUpdate:
      pageFilePath = `${viewsDir}/${namePascal}_edit_page.dart`;
      break;
  }

  // var pageFile = `${viewsDir}/${nameSnake}/${nameSnake}_page.dart`;
  // var pageFile = `${viewsDir}/${nameSnake}_page.dart`;

  if (fs.existsSync(pageFilePath)) {
    window.showWarningMessage(`File already exists: ${pageFilePath}`);
  } else {
    switch (opts.kind) {
      case PageKind.CRUDPage:
        const fieldsStr = await window.showInputBox({
          value: '',
          placeHolder: 'Fields, eg: id:id,name:z,active:b,timestamp:dt,num:i,num:i64,keywords:z[]'
        }) || "";

        if (fieldsStr === "") {
          return;
        }

        let fields = parseFieldsStr(fieldsStr);

        fs.writeFileSync(pageFilePath, _genCodeCRUDPage(name, fields));
        break;
      // case PageKind.Basic:
      //   fs.writeFileSync(pageFilePath, _genCodeBasic(name));
      //   break;
      // case PageKind.Detail:
      //   fs.writeFileSync(pageFilePath, await _genCodeDetail(name, web));
      //   break;
      // case PageKind.FormAdd:
      //   fs.writeFileSync(pageFilePath, await _genCodeAddForm(name, web));
      //   break;
      // case PageKind.FormUpdate:
      //   fs.writeFileSync(pageFilePath, await _genCodeUpdateForm(name, web));
      //   break;
    }
    setTimeout(() => {
      openAndFormatFile(pageFilePath);
    }, 1000);
  }
}

function _genCodeCRUDPage(name: string, fields: Array<Field>) {

  let namePascal = pascalCase(name);
  let nameCamel = camelCase(name);

  let columns = fields.map((a) => `'${pascalCase(a.name)}'`);
  columns.push(`'Op'`);
  let columnsStr = columns.join(', ');
  let rowsStr = fields.map((a) => `<td>{{ rowItem.${snakeCase(a.name)} }}</td>`).join("\n");

  let generatedCode = `<!-- This file is auto generated by ansvia-vscode extension -->
<template>
  <div class="ui stackable grid">
    <div class="column">
      <div class="ui vertical basic clearing segment page-title">
        <h1 class="ui left floated header">${nameToPlural(name)}</h1>
        <button class="ui huge primary right floated button">Tambah ${name}</button>
      </div>
      <div class="ui basic vertical segment">
        <form action="GET" class="ui form" @submit.prevent="">
          <div class="field">

          </div>
        </form>
      </div>
      <div class="ui basic vertical segment">
        <AnsTable ref="${nameCamel}Table"
          :thead="[${columnsStr}]"
          :apiUrl="api.${nameCamel}.search"
          :apiParams="{
            query: searchQuery,
            offset: (currentPage - 1) * perPage,
            limit: perPage
          }"
          apiKind="public"
          :perPage="perPage"
          :currentPage="currentPage"
          @onPaginationClicked="goToPage"
        >
          <template v-slot:tbody="{rowItems, currentPage, perPage, withNumber}">
            <tr v-for="(rowItem, rowIdx) in rowItems" :key="rowIdx">
              <td v-if="withNumber" class="center aligned">{{ rowIdx + 1 + ((currentPage - 1) * perPage ) }}</td>
              ${rowsStr}
              <td><router-link :to="{name: '${nameCamel}Detail', params:{id: rowItem.id}}">Lihat Detail</router-link></td>
            </tr>
          </template>
        </AnsTable>
      </div>
    </div>
  </div>
</template>

<script>
import AnsTable from '@/components/AnsTable.vue'
import * as apiUtil from '@/utils/apiUtil'
import * as api from '@/ApiEndpoint'

export default {
  name: '${namePascal}',
  components: {
    AnsTable
  },
  utils: {
    api,
    apiUtil
  },
  data() {
    return {
      searchQuery: '',
      currentPage: 1,
      perPage: 10,
    }
  },
  created() {    
    this.isProcessing = true
    this.$pdm.api().publicApi.get(api.${nameCamel}.search, {params:{offset: 0, limit: 10, merchant_id: 1, labels:'cat:Snacks'}})
    .then(({data}) => {
      apiUtil.process(data, () => {
        // code if success...
      }, () => {
        this.showError(data.description)
      })
    })
    .catch(_err => {})
    .then(_ => {
      this.isProcessing = false
    })

    this.setupData()
    
  },
  methods: {
    createRouterQuery(curPage = 1) {
      const routerOptions = {
        name: '${nameCamel}s',
        query: {
          page: curPage,
          per_page: this.perPage
        }
      }

      if (this.searchQuery.length > 0) {
        routerOptions.query.query = this.searchQuery
      }

      return routerOptions
    },
    goToPage(page) {
      this.$router.replace(this.createRouterQuery(page))
    },
    setupData() {
      const routeQuery = this.$route.query
      this.searchQuery = routeQuery.query || this.searchQuery

      this.currentPage = parseInt(routeQuery.page) || this.currentPage
      this.perPage = parseInt(routeQuery.per_page) || this.perPage
    }
  },
  watch: {
    $route() {
      this.setupData()
      this.$nextTick(function(){
        this.$refs.${nameCamel}Table.fetchData()
      })
    }
  },
}
</script>`;
  return generatedCode;
}

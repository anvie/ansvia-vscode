import { workspace, TextDocument, window } from "vscode";

import fs = require('fs');
import camelCase = require("camel-case");
import config = require('./config');


export function setupSyncGen() {
  const rootDir = workspace.workspaceFolders![0].uri.path;

  if (!rootDir) {
    return;
  }

  let conf = config.parse();
  console.log(conf);

  if (!conf) {
    return;
  }

  var sync_gen = conf['sync_gen'];

  if (sync_gen) {


    workspace.onDidSaveTextDocument((document: TextDocument) => {
      console.log(`document saved: ${document.fileName}`);
      const c = sync_gen['error_code'];
      // if (c === null) {
      //   window.showErrorMessage("Invalid error_code parameter");
      //   return;
      // }
      if (c && document.fileName === `${rootDir}/${c['src']}`) {
        genErrorCodeFromRust(rootDir, c['src'], c['outs']);
      }

      const enumTypes: Array<any> = sync_gen["enum_types"];
      if (enumTypes === null) {
        return;
      }
      //   const monitoredFileNames = enumTypes.map(o => `${rootDir}/${o["src"].split('#')[0]}`);
      //   console.log(`monitoredFileNames: ${monitoredFileNames}`);

      enumTypes.forEach((o) => {
        const s = o['src'].split('#');
        const srcFile = s[0];
        const srcType = s[1];
        const outs = o['outs'];
        if (srcFile === null || srcType === null || outs === null) {
          window.showErrorMessage(`Invalid srcFile, srcType, or outs for ${o}`);
          return;
        }
        if (document.fileName === `${rootDir}/${srcFile}`) {
          genEnumTypes(rootDir, srcFile, srcType, outs);
        }
      });

    });
  }

}

function genEnumTypes(rootDir: String, source: String, typeName: String, outs: Array<String>) {
  console.log("Generating enum types code...");

  let reName = new RegExp('^(pub)? ?enum ' + typeName + ' ?{?$');
  let reDec = new RegExp('(\\w*) ?= ?(\\d*),?');
  let reDecNonum = new RegExp('^(\\w*),?$');

  let lines = fs.readFileSync(`${rootDir}/${source}`, 'utf8').split('\n');
  var inEnumCode = false;
  var headerLines: Array<string> = [];
  var jsLines = [];
  var dartLines = [];

  headerLines.push('// This file is autogenerated by ansvia-vscode');
  headerLines.push('// don\'t edit by hand or your changes will lost without you knowing');

  jsLines.push(`export default class ${typeName} {`);
  dartLines.push(`class ${typeName} {`);
  var idx = 0;

  for (let line of lines) {
    let linet = line.trim();
    if (linet.length === 0){
      continue;
    }
    if (!inEnumCode && reName.test(linet)) {
      inEnumCode = true;
      idx = 0;
    }
    if (inEnumCode) {
      if (linet.startsWith('///')) {
        jsLines.push('  ' + linet.substring(1));
        dartLines.push('  ' + linet.substring(1));
      } else {
        let s = reDec.exec(linet);
        if (s && s.length === 3) {
          jsLines.push(`  static ${s[1]} = ${s[2]};\n`);
          dartLines.push(`  static const int ${camelCase(s[1])} = ${s[2]};\n`);
        } else {
          let s = reDecNonum.exec(linet);
          if (s && s.length === 2) {
            jsLines.push(`  static ${s[1]} = ${idx};\n`);
            dartLines.push(`  static const int ${camelCase(s[1])} = ${idx};\n`);
            idx++;
          }
        }
      }
      if (linet === '}') {
        break;
      }
    }
  }

  jsLines.push('}');
  dartLines.push('}');

  let jsCode = headerLines.join('\n') + '\n' + jsLines.join('\n');
  let dartCode = headerLines.join('\n') + '\n' + dartLines.join('\n');

  outs.forEach((fpath) => {
    if (fpath.startsWith('js:')) {
      let path = fpath.substring(3);
      console.log("syncing enum type code to " + path + " ...");
      let outPath = `${rootDir}/${path}`;
      fs.writeFileSync(outPath, jsCode);
    }
    if (fpath.startsWith('dart:')) {
      let path = fpath.substring(5);
      console.log("syncing enum type code to " + path + " ...");
      let outPath = `${rootDir}/${path}`;
      fs.writeFileSync(outPath, dartCode);
    }
  });
}

// @deprecated: this function will replaced using general purpose enum type code generator `genEnumTypes`.
function genErrorCodeFromRust(rootDir: String, source: String, outs: Array<String>) {
  console.log("Generating error codes...");

  let reName = new RegExp('^(pub)? ?enum ErrorCode ?{?$');
  let reDec = new RegExp('(\\w*) ?= ?(\\d*),?');

  let lines = fs.readFileSync(`${rootDir}/${source}`, 'utf8').split('\n');
  var inErrorCode = false;
  var headerLines: Array<string> = [];
  var jsLines = [];
  var dartLines = [];

  headerLines.push('// This file is autogenerated by ansvia-vscode');
  headerLines.push('// don\'t edit by hand or your changes will lost without you knowing');

  jsLines.push(`export default class ErrorCode {`);
  dartLines.push(`class ErrorCode {`);

  for (let line of lines) {
    let linet = line.trim();
    if (!inErrorCode && reName.test(linet)) {
      inErrorCode = true;
    }
    if (inErrorCode) {
      if (linet.startsWith('///')) {
        jsLines.push('  ' + linet.substring(1));
        dartLines.push('  ' + linet.substring(1));
      } else {
        let s = reDec.exec(linet);
        if (s && s.length === 3) {
          jsLines.push(`  static ${s[1]} = ${s[2]};\n`);
          dartLines.push(`  static const int ${camelCase(s[1])} = ${s[2]};\n`);
        }
      }
      if (linet === '}') {
        break;
      }
    }
  }

  jsLines.push('}');
  dartLines.push('}');

  let jsCode = headerLines.join('\n') + '\n' + jsLines.join('\n');
  let dartCode = headerLines.join('\n') + '\n' + dartLines.join('\n');

  outs.forEach((fpath) => {
    if (fpath.startsWith('js:')) {
      let path = fpath.substring(3);
      console.log("syncing error code to " + path + " ...");
      let outPath = `${rootDir}/${path}`;
      fs.writeFileSync(outPath, jsCode);
    }
    if (fpath.startsWith('dart:')) {
      let path = fpath.substring(5);
      console.log("syncing error code to " + path + " ...");
      let outPath = `${rootDir}/${path}`;
      fs.writeFileSync(outPath, dartCode);
    }
  });
}

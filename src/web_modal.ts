import { window } from 'vscode';

import { getWebInfo } from './web_util';
import { openAndFormatFile } from './util';

var pascalCase = require('pascal-case');
var fs = require('fs');

export enum ModalKind {
  Basic,
}

class GenWebModalOpts {
  kind: ModalKind;
  constructor(kind: ModalKind) {
    this.kind = kind;
  }
}

export async function generateModalPage(opts: GenWebModalOpts) {
    const web = getWebInfo();

    if (!web) {
        return;
    }

    // get modal component name
    const name = await window.showInputBox({
        value: '',
        valueSelection: [0, 11],
        placeHolder: 'Name, eg: DetailTodoModal'
    }) || "";

    if (name === "") {
        return;
    }

    const webProjectDir = web.projectDir;
    const projectDir = await window.showInputBox({
      value: '',
      valueSelection: [0, 11],
      placeHolder: `Project dir, eg: /Users/surya/. Def: ${webProjectDir}`
    }) || web.projectDir;

    var viewsDir = `${projectDir}/src/components/modal`;

    window.showInformationMessage(viewsDir);

    if (!fs.existsSync(viewsDir)) {
        fs.mkdirSync(viewsDir);
    }

    var namePascal = pascalCase(name);

    var pageFilePath = "";
    switch (opts.kind) {
      case ModalKind.Basic:
        pageFilePath = `${viewsDir}/${namePascal}.vue`;
        break;
    }

    if (fs.existsSync(pageFilePath)) {
        window.showWarningMessage(`File already exists: ${pageFilePath}`);
    } else {
        switch (opts.kind) {
          case ModalKind.Basic:
              fs.writeFileSync(pageFilePath, _genCodeModalPage());
              break;
        }

        openAndFormatFile(pageFilePath);
    }

    function _genCodeModalPage() {
        let generatedCode = `<!-- This file is auto generated by ansvia-vscode extension -->
<template>
  <modal :name="modalName" width="95%" :max-width="800" :min-width="320" :clickToClose="clickToClose" :scrollable="true" :adaptive="true" height="auto" @before-open="beforeOpen" @before-close="beforeClose">
    <div class="size-modal-content">
    <div class="ui fullscreen modal transition visible active">
      <i class="close icon" @click="closeModal()" v-if="withCloseButton"></i>
      <div class="header" v-if="headerTitle">{{ headerTitle }}</div>
      <div class="content" :class="{'without-header': !headerTitle && withCloseButton}">
        <slot :closeModal="closeModal"></slot>
      </div>
    </div>
    </div>
  </modal>
</template>
<script>
export default {
  props: {
    modalName: {
      type: String,
      required: true
    },
    headerTitle: {
      type: String,
    },
    withCloseButton: {
      type:Boolean,
      default: false
    },
    clickToClose: {
      type:Boolean,
      default: false
    }
  },
  methods: {
    closeModal() {
      this.$modal.hide(this.modalName)
    },
    beforeOpen() {
      this.$emit('beforeOpen')
    },
    beforeClose() {
      this.$emit('beforeClose')
    }
  }
};
</script>
        `;

        return generatedCode;
    }
}
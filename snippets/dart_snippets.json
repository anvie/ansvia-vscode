{
    "Create BlocBuilder code": {
        "prefix": "blocbuilder",
        "body": [
            "BlocBuilder<${1:Name}Bloc, ${1:Name}State>(",
            "  builder: (BuildContext context, ${1:Name}State state){",
            "    //@TODO(*): code here",
            "    return null;",
            "  }",
            ");"
        ]
    },
    "Create BlocProvider code": {
        "prefix": "blocprovider",
        "body": [
            "BlocProvider(",
            "  builder: (BuildContext context){",
            "    //@TODO(*): code here",
            "    return ${1:NameBloc};",
            "  },",
            "  child: ${2:Container()}",
            ");"
        ]
    },
    "Create MultiBlocProvider code": {
        "prefix": "multiblocprovider",
        "body": [
            "MultiBlocProvider(",
            "  providers:[",
            "    BlocProvider<${1:BlocName}>(",
            "      builder: (context) => ${1:BlocName}(),",
            "    )",
            "  ],",
            "child: ${2:Widget}()",
            ");"
        ]
    },
    "Create Map event to state method in Bloc": {
        "prefix": "mapeventtostate",
        "body": [
            "Stream<${1:Name}State> _map${2:Event}ToState(${3:EventName} event) async* {",
            "  // yield ",
            "}"
        ]
    },
    "Create Scaffold code": {
        "prefix": "scaffold",
        "body": [
            "Scaffold(",
            "  appBar: AppBar(",
            "    title: Text(${1:title})",
            "  ),",
            "  body: ${2:null}",
            ")"
        ]
    },
    "Implement map event to state ADD method": {
        "prefix": "mapeventtostateadd",
        "body": [
            "Stream<${1:name}State> _map${2:Event}ToState(${3:Event} event) async* {",
            "  yield ${1:name}Loading();",
            "",
            "  final data = await PublicApi.post(\"${4:/api}\", {",
            "      // @TODO(you): add data to post here",
            "  });",
            "  if (data != null) {",
            "",
            "    yield ${1:name}Added(${1:name}.fromMap(data[\"result\"]));",
            "  } else {",
            "    yield ${1:name}Failure(error: \"Cannot add ${1:name}\");",
            "  }",
            "}"
        ]
    },
    "Implement map event to state UPDATE method": {
        "prefix": "mapeventtostateupdate",
        "body": [
            "Stream<${1:name}State> _map${2:Event}ToState(${3:Event} event) async* {",
            "  yield ${1:name}Loading();",
            "",
            "  final data = await PublicApi.post(\"${4:/endpoint}\", {",
            "      // @TODO(you): set data to post here",
            "  });",
            "  if (data != null) {",
            "    print(\"data: \\$data\");",
            "",
            "    yield ${1:name}Updated(${1:name}.fromMap(data[\"result\"]));",
            "  } else {",
            "    yield ${1:name}Failure(error: \"Cannot update ${1:name}\");",
            "  }",
            "}"
        ]
    },
    "Generate API get request in Bloc style": {
        "body": [
            "final data = await PublicApi.get(\"/${1:endpoint}\");",
            "",
            "    if (data != null) {",
            "      yield ${2:Name}ListLoaded(${2:Name}.fromMap(data[\"result\"]));",
            "    } else {",
            "      yield ${2:Name}Failure(error: \"Cannot get ${2:Name} data from server\");",
            "    }"
        ],
        "prefix": "blocapiget",
        "description": "Generate API get call in Bloc style"
    },
    "Generate API get request in Bloc style with entries return": {
        "body": [
            "final data = await PublicApi.get(\"/${1:endpoint}\");",
            "",
            "    if (data != null) {",
            "      yield ${2:Name}ListLoaded((data[\"result\"][\"entries\"] as List<dynamic>)",
            "          .map((a) => ${2:Name}.fromMap(a))",
            "          .toList());",
            "    } else {",
            "      yield ${2:Name}Failure(error: \"Cannot get ${2:Name} data from server\");",
            "    }"
        ],
        "prefix": "blocapigetentries",
        "description": "Generate API get call in Bloc style with entries return"
    },
    "Generate code to fetch API resource via SmartRepo in bloc mode": {
        "scope": "dart",
        "prefix": "blocrepofetchentries",
        "body": [
            "    yield* repo",
            "        .fetchGradually(",
            "            \"${1:entry_name}\",",
            "            () => PublicApi.get(",
            "                \"/${2:endpoint}\"),",
            "            force: event.force)",
            "        .map((d) {",
            "      if (d != null) {",
            "        final entries = (d.data[\"entries\"] as List<dynamic>)",
            "          .map((a) => ${3:ModelItem}.fromMap(a))",
            "          .toList();",
            "",
            "        if (d.isLocal){",
            "          return ${3:ModelItem}sLoaded(entries);",
            "        }else{",
            "          return ${3:ModelItem}sUpdated(entries);",
            "        }",
            "",
            "      } else {",
            "        return ${3:ModelItem}Failure(",
            "            error: \"Cannot get ${3:ModelItem} data from server\");",
            "      }",
            "    });"
        ]
    },
    "Generate code to post API resource in bloc mode": {
        "scope": "dart",
        "prefix": "blocapiadd",
        "body": [
            "    final data = await PublicApi.post(\"/${1:endpoint}\", {",
            "      // @TODO(you): add params to post here",
            "    });",
            "",
            "    if (data != null) {",
            "",
            "      repo.updateEntriesItem(\"entries\", data[\"result\"]);",
            "",
            "      yield ${2:Model}Created(${2:Model}.fromMap(data[\"result\"]));",
            "",
            "      dispatch(Load${2:Model}());",
            "    } else {",
            "      yield ${2:Model}Failure(error: \"Cannot add ${2:Model}\");",
            "    }"
        ]
    },
    "Generate Flutter form field dropdown list": {
        "scope": "dart",
        "prefix": "formdropdownlist",
        "body": [
            "  FormField(builder: (FormFieldState state) {",
            "    return InputDecorator(",
            "      decoration: InputDecoration(labelText: \"${1:name}\"),",
            "      child: DropdownButtonHideUnderline(",
            "        child: DropdownButton(",
            "          items: <String>[${2:\"item1\"}].map((v) {",
            "            return DropdownMenuItem(",
            "                value: v, child: Text(v));",
            "          }).toList(),",
            "          value: _${3:name}Controller.text,",
            "          onChanged: (newVal) {",
            "            setState(() {",
            "              _${3:name}Controller.text = newVal;",
            "            });",
            "          },",
            "        ),",
            "      ),",
            "    );",
            "  }),"
        ]
    },
    "Generate boilerplate PublicApi.get code": {
        "scope": "dart",
        "prefix": "publicapiget",
        "body": [
            "final data = await PublicApi.get(\"${1:/path}\");"
        ]
    },
    "Create kind-like map": {
        "scope": "dart",
        "prefix": "kindmap",
        "body": [
            "const Map<int, ${2:Type}> ${1:SomeKind} = {",
            "  ${3:SomeKind.systemFeed: Colors.grey},",
            "};"
        ]
    },
    "Create singleton class": {
        "scope": "dart",
        "prefix": "singleton",
        "body": [
            "class ${1:Name} {",
            "  static final ${1:Name} _${2:name} = ${1:Name}._internal();",
            "",
            "  factory ${1:Name}() {",
            "    return _${2:name};",
            "  }",
            "",
            "  ${1:Name}._internal();",
            "}"
        ]
    },
    "Create Navigator.pop code": {
        "prefix": "navigatorpop",
        "body": "Navigator.pop(context);"
    },
    "Create Navigator.push": {
        "prefix": "navigatorpush",
        "body": "Navigator.of(context).push(${1:});"
    },
    "Create Navigator.push Material route": {
        "prefix": "navpushmaterialroute",
        "body": "Navigator.of(context).push(MaterialPageRoute(builder: (context) => ${1:SomePage()}()));"
    },
    "Create Navigator.push named": {
        "prefix": "navigatorpushnamed",
        "body": "Navigator.of(context).pushNamed(${1:\"\"});"
    }
}